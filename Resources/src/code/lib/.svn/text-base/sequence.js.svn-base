var exports = exports || {}

	function arraysDiff( a, b ) { return a.filter(function(i) {return !(b.indexOf(i) > -1)}) }
	 exports.arraysDiff

	function defaultDictionary( dictionary, valuesDefault )
	{ 
		var dictionary = dictionary || {}
		if (valuesDefault)
		{
			k = exports.keys(valuesDefault)
			for ( var iKey = 0, IKey = k.length;  iKey < IKey;  iKey++ )
			{
				key  =  k[iKey]
				dictionary[key] = dictionary[key] || valuesDefault[key]
			}
		}
	return dictionary
	}exports.defaultDictionary = defaultDictionary

	function dictionaryUpdate( dst, src )
	{// similar to python's dict.update(src)
		var src = exports.defaultDictionary(src)
		var dst = exports.defaultDictionary(src)
		var k   = exports.keys(src)
		for ( var iKey = 0, IKey = k.length;  iKey < IKey;  iKey++ )
		{
			var key  =  k[iKey]
			dst[key] = src[key]
		}
	return dst
	}exports.dictionaryUpdate = dictionaryUpdate

	function indexFirst(any) { return 0 } // irrelevant, arrays start at 0
	 exports.indexFirst = indexFirst

	function indexLast(list) { return list.length ? list.length -1 : 0 } // an array of 6 elements goes from 0-5
	 exports.indexLast = indexLast

	function charFirst(string) { return string.charAt( exports.indexFirst(string) ) }
	 exports.charFirst = charFirst

	function charLast(string)  { return string.charAt( exports.indexLast(string)  ) }
	 exports.charLast = charLast

	function left( string, chars ) { return string.substr( exports.indexFirst(string), chars ) }
	 exports.left = left

	function addItemToListAsFirst( list, item )
	{ 
		list.splice( 0, 0, item )
	return list
	}exports.addItemToListAsFirst = addItemToListAsFirst


	function keys(dictionary)
	{// from http://stackoverflow.com/questions/890807/iterate-over-a-javascript-associative-array-in-sorted-order
	    var keys = []	
	    for ( var key in dictionary )
	        if( dictionary.hasOwnProperty(key) )
	            keys.push(key)
    return   keys
	}exports.keys = keys

	function values(dictionary)
	{
		var keys   = exports.keys(dictionary)
		var values = []
		for ( var iKey = 0, IKey = keys.length;  iKey < IKey;  iKey++ )
			 values.push( dictionary[ keys[iKey] ] )
	return   values
	}exports.values = values

	function entries(dictionary)
	{
		var keys   = exports.keys(dictionary)
		var values = exports.values(dictionary)
		var entries = []
		for ( var iKey = 0, IKey = keys.length;  iKey < IKey;  iKey++ )
			 entries.push( { key: keys[iKey], value: values[iKey] } )
	return   entries
	}exports.entries = entries

	function deleteKey( dictionary, key )
	{
		if (dictionary[key])
			delete dictionary[key]
	return dictionary
	}exports.deleteKey = deleteKey



	function listToArray(list) { return list ? Array.prototype.slice.call(list) : [] }
	 exports.listToArray = listToArray

	function cleanList(list)
	{
		var array = exports.listToArray(list)
		for ( var iList = 0, IList = array.length, accepted=[];  iList < IList;  iList++ )
		{
			var element = array[iList]
			if (element)
				accepted.push(element)
		}
	return accepted
	}exports.cleanList = cleanList

	function firstValid(list)
	{
		for ( var iList = 0, IList = list.length;  iList < IList;  iList++ )
		{
			var item = list[iList]
			if (item)
			{// We are looking for the 1st valid entry in the list
	return item
			}
		}
	return null
	}exports.firstValid = firstValid


	function map( fn, list )//, args
	{// like python's map fn
		for ( var iList = 0, IList = list.length, results = [];  // Initial conditions
				  iList    < IList;								 // Ending  conditions
				  iList++                                       )// Iterating actions
		{// This is a very common and repetitive piece of code, we want to stay DRY
			var args    = exports.listToArray(arguments)
				args[0] = iList // we merely switch fn for the current iList
			results.push(  fn.apply( this, args )  )
		}
	return results
	}exports.map = map

	function sumarize( list, useString )
	{
		var useString = useString || true
		var result    = useString ? '' : 0
		for ( var iList = 0, IList = list.length;  iList < IList;  iList++ )
			result += list[iList]
	return result
	}exports.sumarize = sumarize
